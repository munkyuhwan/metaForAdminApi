var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from "react";
import { Animated, Easing, Platform, ScrollView, View, } from "react-native";
var AutoScrolling = function (_a) {
    var style = _a.style, children = _a.children, _b = _a.endPaddingWidth, endPaddingWidth = _b === void 0 ? 100 : _b, duration = _a.duration, _c = _a.delay, delay = _c === void 0 ? 0 : _c, _d = _a.isLTR, isLTR = _d === void 0 ? false : _d;
    var _e = React.useState(false), isAutoScrollEnabled = _e[0], setIsAutoScrollEnabled = _e[1];
    var _f = React.useState(endPaddingWidth), dividerWidth = _f[0], setDividerWidth = _f[1];
    var containerWidth = React.useRef(0);
    var contentWidth = React.useRef(0);
    var offsetX = React.useRef(new Animated.Value(0));
    var contentRef = React.useRef(null);
    var measureContainerView = React.useCallback(function (_a) {
        var width = _a.nativeEvent.layout.width;
        if (containerWidth.current === width)
            return;
        containerWidth.current = width;
        if (!contentRef.current)
            return;
        contentRef.current.measure(function (fx, _fy, width) {
            checkContent(width, fx);
        });
    }, []);
    var checkContent = React.useCallback(function (newContentWidth, fx) {
        if (!newContentWidth) {
            setIsAutoScrollEnabled(false);
            return;
        }
        if (contentWidth.current === newContentWidth)
            return;
        contentWidth.current = newContentWidth;
        var newDividerWidth = endPaddingWidth;
        if (contentWidth.current < containerWidth.current) {
            if (endPaddingWidth < containerWidth.current - contentWidth.current) {
                newDividerWidth = containerWidth.current - contentWidth.current;
            }
        }
        setDividerWidth(newDividerWidth);
        setIsAutoScrollEnabled(true);
        if (isLTR) {
            offsetX.current.setValue(-(newContentWidth + newDividerWidth));
        }
        Animated.loop(Animated.timing(offsetX.current, {
            toValue: isLTR ? fx : -(contentWidth.current + fx + newDividerWidth),
            duration: duration || 50 * contentWidth.current,
            delay: delay,
            easing: Easing.linear,
            useNativeDriver: Platform.OS !== "web",
        })).start();
    }, []);
    var childrenCloned = React.useMemo(function () {
        return React.cloneElement(children, __assign(__assign({}, children.props), { onLayout: function (_a) {
                var _b = _a.nativeEvent.layout, width = _b.width, x = _b.x;
                if (!containerWidth.current || width === contentWidth.current)
                    return;
                offsetX.current.stopAnimation();
                offsetX.current.setValue(0);
                offsetX.current.setOffset(0);
                checkContent(width, x);
            }, ref: function (ref) { return (contentRef.current = ref); } }));
    }, [children]);
    return (React.createElement(View, { onLayout: measureContainerView, style: style },
        React.createElement(ScrollView, { horizontal: true, bounces: false, scrollEnabled: false, showsHorizontalScrollIndicator: false },
            React.createElement(Animated.View, { style: [
                    { flexDirection: "row" },
                    { transform: [{ translateX: offsetX.current }] },
                ] },
                childrenCloned,
                isAutoScrollEnabled && (React.createElement(React.Fragment, null,
                    React.createElement(View, { style: { width: dividerWidth } }),
                    children))))));
};
export default React.memo(AutoScrolling);
